// Mocks generated by Mockito 5.4.4 from annotations
// in domain/test/task_handler.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:domain/usecases/task_handler.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_domain/models/task.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskHandlerUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskHandlerUseCase extends _i1.Mock
    implements _i2.TaskHandlerUseCase {
  MockTaskHandlerUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Task> getTodayTasks(List<_i3.Task>? tasks) => (super.noSuchMethod(
        Invocation.method(
          #getTodayTasks,
          [tasks],
        ),
        returnValue: <_i3.Task>[],
      ) as List<_i3.Task>);

  @override
  List<_i3.Task> getPostponeTasks(List<_i3.Task>? tasks) => (super.noSuchMethod(
        Invocation.method(
          #getPostponeTasks,
          [tasks],
        ),
        returnValue: <_i3.Task>[],
      ) as List<_i3.Task>);

  @override
  List<_i3.Task> getFutureTasks(List<_i3.Task>? tasks) => (super.noSuchMethod(
        Invocation.method(
          #getFutureTasks,
          [tasks],
        ),
        returnValue: <_i3.Task>[],
      ) as List<_i3.Task>);

  @override
  List<_i3.Task> getCompletedTasks(List<_i3.Task>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompletedTasks,
          [tasks],
        ),
        returnValue: <_i3.Task>[],
      ) as List<_i3.Task>);
}
